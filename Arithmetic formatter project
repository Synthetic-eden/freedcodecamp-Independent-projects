def arithmetic_arranger(problems, show_answers=False):
    for problem in problems:
        parts = problem.split()
        left_operand = parts[0]
        operator = parts[1]
        right_operand = parts[2]

        
        if operator not in ["+", "-"]:
            return "Error: Operator must be '+' or '-'."

        
        if not left_operand.isdigit() or not right_operand.isdigit():
            return "Error: Numbers must only contain digits."

        
        if len(left_operand) > 4 or len(right_operand) > 4:
            return "Error: Numbers cannot be more than four digits."
        if len(problems)>5 : 
            return 'Error: Too many problems.'
    row1_parts = []
    row2_parts = []
    row3_parts = []
    row4_parts = []
    for problem in problems:
        parts = problem.split()
        left_operand = parts[0]
        operator = parts[1]
        right_operand = parts[2]
        max_number_length = max(len(left_operand), len(right_operand)) 
        width = max_number_length + 2
        result = str(eval(left_operand + operator + right_operand))
        
        row_1 = left_operand.rjust(width)
        row_2 = operator + right_operand.rjust(width - 1)
        row_3 = '-' * width
        row_4 = result.rjust(width)
        row1_parts.append(row_1)
        row2_parts.append(row_2)
        row3_parts.append(row_3)
        row4_parts.append(row_4)
    row_1 = "    ".join(row1_parts)
    row_2 = "    ".join(row2_parts)
    row_3 = "    ".join(row3_parts)
    row_4 = "    ".join(row4_parts)
    arranged = row_1 + '\n' + row_2 + '\n' + row_3
    if show_answers :
        arranged += '\n' + row_4
        
        

        
    

    return arranged

print(f'\n{arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"])}')
